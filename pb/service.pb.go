// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	service.proto

It has these top-level messages:
	CompressImageRequest
	CompressImageResponse
	DecompressImageRequest
	DecompressImageResponse
	CompressTextRequest
	CompressTextResponse
	DecompressTextRequest
	DecompressTextResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CompressionLevel int32

const (
	CompressionLevel_DefaultCompression CompressionLevel = 0
	CompressionLevel_NoCompression      CompressionLevel = 1
	CompressionLevel_BestSpeed          CompressionLevel = 2
	CompressionLevel_BestCompression    CompressionLevel = 3
)

var CompressionLevel_name = map[int32]string{
	0: "DefaultCompression",
	1: "NoCompression",
	2: "BestSpeed",
	3: "BestCompression",
}
var CompressionLevel_value = map[string]int32{
	"DefaultCompression": 0,
	"NoCompression":      1,
	"BestSpeed":          2,
	"BestCompression":    3,
}

func (x CompressionLevel) String() string {
	return proto.EnumName(CompressionLevel_name, int32(x))
}
func (CompressionLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ImageType int32

const (
	ImageType_PNG  ImageType = 0
	ImageType_JPEG ImageType = 1
)

var ImageType_name = map[int32]string{
	0: "PNG",
	1: "JPEG",
}
var ImageType_value = map[string]int32{
	"PNG":  0,
	"JPEG": 1,
}

func (x ImageType) String() string {
	return proto.EnumName(ImageType_name, int32(x))
}
func (ImageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CompressImageRequest struct {
	Image []byte           `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Level CompressionLevel `protobuf:"varint,2,opt,name=level,enum=compression_service.CompressionLevel" json:"level,omitempty"`
	Type  ImageType        `protobuf:"varint,3,opt,name=type,enum=compression_service.ImageType" json:"type,omitempty"`
}

func (m *CompressImageRequest) Reset()                    { *m = CompressImageRequest{} }
func (m *CompressImageRequest) String() string            { return proto.CompactTextString(m) }
func (*CompressImageRequest) ProtoMessage()               {}
func (*CompressImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CompressImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CompressImageRequest) GetLevel() CompressionLevel {
	if m != nil {
		return m.Level
	}
	return CompressionLevel_DefaultCompression
}

func (m *CompressImageRequest) GetType() ImageType {
	if m != nil {
		return m.Type
	}
	return ImageType_PNG
}

type CompressImageResponse struct {
	ResponseCode    int32            `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string           `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Image           []byte           `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Format          string           `protobuf:"bytes,4,opt,name=format" json:"format,omitempty"`
	Level           CompressionLevel `protobuf:"varint,5,opt,name=level,enum=compression_service.CompressionLevel" json:"level,omitempty"`
}

func (m *CompressImageResponse) Reset()                    { *m = CompressImageResponse{} }
func (m *CompressImageResponse) String() string            { return proto.CompactTextString(m) }
func (*CompressImageResponse) ProtoMessage()               {}
func (*CompressImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompressImageResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *CompressImageResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *CompressImageResponse) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *CompressImageResponse) GetFormat() string {
	if m != nil {
		return m.Format
	}
	return ""
}

func (m *CompressImageResponse) GetLevel() CompressionLevel {
	if m != nil {
		return m.Level
	}
	return CompressionLevel_DefaultCompression
}

type DecompressImageRequest struct {
	Image []byte           `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	Level CompressionLevel `protobuf:"varint,2,opt,name=level,enum=compression_service.CompressionLevel" json:"level,omitempty"`
	Type  ImageType        `protobuf:"varint,3,opt,name=type,enum=compression_service.ImageType" json:"type,omitempty"`
}

func (m *DecompressImageRequest) Reset()                    { *m = DecompressImageRequest{} }
func (m *DecompressImageRequest) String() string            { return proto.CompactTextString(m) }
func (*DecompressImageRequest) ProtoMessage()               {}
func (*DecompressImageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DecompressImageRequest) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *DecompressImageRequest) GetLevel() CompressionLevel {
	if m != nil {
		return m.Level
	}
	return CompressionLevel_DefaultCompression
}

func (m *DecompressImageRequest) GetType() ImageType {
	if m != nil {
		return m.Type
	}
	return ImageType_PNG
}

type DecompressImageResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Image           []byte `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *DecompressImageResponse) Reset()                    { *m = DecompressImageResponse{} }
func (m *DecompressImageResponse) String() string            { return proto.CompactTextString(m) }
func (*DecompressImageResponse) ProtoMessage()               {}
func (*DecompressImageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DecompressImageResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *DecompressImageResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *DecompressImageResponse) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

type CompressTextRequest struct {
	Text []byte `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *CompressTextRequest) Reset()                    { *m = CompressTextRequest{} }
func (m *CompressTextRequest) String() string            { return proto.CompactTextString(m) }
func (*CompressTextRequest) ProtoMessage()               {}
func (*CompressTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CompressTextRequest) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

type CompressTextResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Text            []byte `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *CompressTextResponse) Reset()                    { *m = CompressTextResponse{} }
func (m *CompressTextResponse) String() string            { return proto.CompactTextString(m) }
func (*CompressTextResponse) ProtoMessage()               {}
func (*CompressTextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CompressTextResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *CompressTextResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *CompressTextResponse) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

type DecompressTextRequest struct {
	Text []byte `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *DecompressTextRequest) Reset()                    { *m = DecompressTextRequest{} }
func (m *DecompressTextRequest) String() string            { return proto.CompactTextString(m) }
func (*DecompressTextRequest) ProtoMessage()               {}
func (*DecompressTextRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DecompressTextRequest) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

type DecompressTextResponse struct {
	ResponseCode    int32  `protobuf:"varint,1,opt,name=response_code,json=responseCode" json:"response_code,omitempty"`
	ResponseMessage string `protobuf:"bytes,2,opt,name=response_message,json=responseMessage" json:"response_message,omitempty"`
	Text            []byte `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
}

func (m *DecompressTextResponse) Reset()                    { *m = DecompressTextResponse{} }
func (m *DecompressTextResponse) String() string            { return proto.CompactTextString(m) }
func (*DecompressTextResponse) ProtoMessage()               {}
func (*DecompressTextResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DecompressTextResponse) GetResponseCode() int32 {
	if m != nil {
		return m.ResponseCode
	}
	return 0
}

func (m *DecompressTextResponse) GetResponseMessage() string {
	if m != nil {
		return m.ResponseMessage
	}
	return ""
}

func (m *DecompressTextResponse) GetText() []byte {
	if m != nil {
		return m.Text
	}
	return nil
}

func init() {
	proto.RegisterType((*CompressImageRequest)(nil), "compression_service.CompressImageRequest")
	proto.RegisterType((*CompressImageResponse)(nil), "compression_service.CompressImageResponse")
	proto.RegisterType((*DecompressImageRequest)(nil), "compression_service.DecompressImageRequest")
	proto.RegisterType((*DecompressImageResponse)(nil), "compression_service.DecompressImageResponse")
	proto.RegisterType((*CompressTextRequest)(nil), "compression_service.CompressTextRequest")
	proto.RegisterType((*CompressTextResponse)(nil), "compression_service.CompressTextResponse")
	proto.RegisterType((*DecompressTextRequest)(nil), "compression_service.DecompressTextRequest")
	proto.RegisterType((*DecompressTextResponse)(nil), "compression_service.DecompressTextResponse")
	proto.RegisterEnum("compression_service.CompressionLevel", CompressionLevel_name, CompressionLevel_value)
	proto.RegisterEnum("compression_service.ImageType", ImageType_name, ImageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Compression service

type CompressionClient interface {
	CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageResponse, error)
	DecompressImage(ctx context.Context, in *DecompressImageRequest, opts ...grpc.CallOption) (*DecompressImageResponse, error)
	CompressText(ctx context.Context, in *CompressTextRequest, opts ...grpc.CallOption) (*CompressTextResponse, error)
	DecompressText(ctx context.Context, in *DecompressTextRequest, opts ...grpc.CallOption) (*DecompressTextResponse, error)
}

type compressionClient struct {
	cc *grpc.ClientConn
}

func NewCompressionClient(cc *grpc.ClientConn) CompressionClient {
	return &compressionClient{cc}
}

func (c *compressionClient) CompressImage(ctx context.Context, in *CompressImageRequest, opts ...grpc.CallOption) (*CompressImageResponse, error) {
	out := new(CompressImageResponse)
	err := grpc.Invoke(ctx, "/compression_service.Compression/CompressImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressionClient) DecompressImage(ctx context.Context, in *DecompressImageRequest, opts ...grpc.CallOption) (*DecompressImageResponse, error) {
	out := new(DecompressImageResponse)
	err := grpc.Invoke(ctx, "/compression_service.Compression/DecompressImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressionClient) CompressText(ctx context.Context, in *CompressTextRequest, opts ...grpc.CallOption) (*CompressTextResponse, error) {
	out := new(CompressTextResponse)
	err := grpc.Invoke(ctx, "/compression_service.Compression/CompressText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compressionClient) DecompressText(ctx context.Context, in *DecompressTextRequest, opts ...grpc.CallOption) (*DecompressTextResponse, error) {
	out := new(DecompressTextResponse)
	err := grpc.Invoke(ctx, "/compression_service.Compression/DecompressText", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Compression service

type CompressionServer interface {
	CompressImage(context.Context, *CompressImageRequest) (*CompressImageResponse, error)
	DecompressImage(context.Context, *DecompressImageRequest) (*DecompressImageResponse, error)
	CompressText(context.Context, *CompressTextRequest) (*CompressTextResponse, error)
	DecompressText(context.Context, *DecompressTextRequest) (*DecompressTextResponse, error)
}

func RegisterCompressionServer(s *grpc.Server, srv CompressionServer) {
	s.RegisterService(&_Compression_serviceDesc, srv)
}

func _Compression_CompressImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressionServer).CompressImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression_service.Compression/CompressImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressionServer).CompressImage(ctx, req.(*CompressImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compression_DecompressImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecompressImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressionServer).DecompressImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression_service.Compression/DecompressImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressionServer).DecompressImage(ctx, req.(*DecompressImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compression_CompressText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompressTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressionServer).CompressText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression_service.Compression/CompressText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressionServer).CompressText(ctx, req.(*CompressTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Compression_DecompressText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecompressTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompressionServer).DecompressText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/compression_service.Compression/DecompressText",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompressionServer).DecompressText(ctx, req.(*DecompressTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Compression_serviceDesc = grpc.ServiceDesc{
	ServiceName: "compression_service.Compression",
	HandlerType: (*CompressionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompressImage",
			Handler:    _Compression_CompressImage_Handler,
		},
		{
			MethodName: "DecompressImage",
			Handler:    _Compression_DecompressImage_Handler,
		},
		{
			MethodName: "CompressText",
			Handler:    _Compression_CompressText_Handler,
		},
		{
			MethodName: "DecompressText",
			Handler:    _Compression_DecompressText_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0x5f, 0x6f, 0x12, 0x4d,
	0x14, 0xc6, 0x3b, 0xb0, 0xf4, 0x7d, 0x39, 0x42, 0x59, 0x0f, 0x2d, 0x12, 0x62, 0x9a, 0xba, 0xb4,
	0x86, 0x3f, 0x0d, 0x44, 0xbc, 0xf4, 0xae, 0xd4, 0x34, 0x1a, 0x6d, 0x9a, 0xb5, 0x57, 0xde, 0x34,
	0x5b, 0x38, 0x25, 0x24, 0xc0, 0xac, 0x3b, 0x53, 0xd2, 0x1a, 0x13, 0x13, 0x3f, 0x80, 0x17, 0x9a,
	0x78, 0x61, 0x62, 0xfc, 0x4e, 0xfa, 0x15, 0xbc, 0xf1, 0x5b, 0x98, 0x9d, 0xdd, 0x65, 0xa7, 0xb8,
	0x6d, 0xf1, 0xc2, 0xc6, 0xbb, 0x99, 0x33, 0xe7, 0xc9, 0xfc, 0xce, 0xc3, 0x33, 0x2c, 0xe4, 0x05,
	0x79, 0xd3, 0x61, 0x8f, 0x5a, 0xae, 0xc7, 0x25, 0xc7, 0x62, 0x8f, 0x8f, 0x5d, 0x8f, 0x84, 0x18,
	0xf2, 0xc9, 0x51, 0x78, 0x54, 0xb9, 0x3b, 0xe0, 0x7c, 0x30, 0xa2, 0xb6, 0xe3, 0x0e, 0xdb, 0xce,
	0x64, 0xc2, 0xa5, 0x23, 0x87, 0x7c, 0x22, 0x02, 0x89, 0xf5, 0x85, 0xc1, 0x6a, 0x37, 0x54, 0x3d,
	0x19, 0x3b, 0x03, 0xb2, 0xe9, 0xd5, 0x29, 0x09, 0x89, 0xab, 0x90, 0x19, 0xfa, 0xfb, 0x32, 0xdb,
	0x60, 0xb5, 0x9c, 0x1d, 0x6c, 0xf0, 0x11, 0x64, 0x46, 0x34, 0xa5, 0x51, 0x39, 0xb5, 0xc1, 0x6a,
	0x2b, 0x9d, 0xad, 0x56, 0xc2, 0x8d, 0xad, 0x6e, 0x5c, 0x7b, 0xe6, 0x37, 0xdb, 0x81, 0x06, 0x3b,
	0x60, 0xc8, 0x73, 0x97, 0xca, 0x69, 0xa5, 0x5d, 0x4f, 0xd4, 0x2a, 0x86, 0xc3, 0x73, 0x97, 0x6c,
	0xd5, 0x6b, 0x7d, 0x63, 0xb0, 0x36, 0xc7, 0x27, 0x5c, 0x3e, 0x11, 0x84, 0x55, 0xc8, 0x7b, 0xe1,
	0xfa, 0xa8, 0xc7, 0xfb, 0x01, 0x68, 0xc6, 0xce, 0x45, 0xc5, 0x2e, 0xef, 0x13, 0xd6, 0xc1, 0x9c,
	0x35, 0x8d, 0x49, 0x08, 0x7f, 0x20, 0x1f, 0x3d, 0x6b, 0x17, 0xa2, 0xfa, 0xf3, 0xa0, 0x1c, 0x0f,
	0x9c, 0xd6, 0x07, 0x2e, 0xc1, 0xf2, 0x09, 0xf7, 0xc6, 0x8e, 0x2c, 0x1b, 0x4a, 0x16, 0xee, 0x62,
	0x23, 0x32, 0x7f, 0x6e, 0x84, 0xf5, 0x95, 0x41, 0x69, 0x97, 0x7a, 0xff, 0xb0, 0xed, 0x6f, 0xe1,
	0xce, 0x6f, 0x80, 0x37, 0xe9, 0xbb, 0x55, 0x87, 0x62, 0x34, 0xcf, 0x21, 0x9d, 0xc9, 0xc8, 0x1e,
	0x04, 0x43, 0xd2, 0x99, 0x0c, 0xdd, 0x51, 0x6b, 0xeb, 0x75, 0x9c, 0xe0, 0xa0, 0xf5, 0x2f, 0x81,
	0x46, 0x77, 0xa7, 0xb5, 0xbb, 0x9b, 0xb0, 0x16, 0xfb, 0x74, 0x1d, 0xe8, 0x1b, 0xfd, 0x57, 0xbf,
	0x69, 0xd4, 0x86, 0x03, 0xe6, 0x7c, 0x42, 0xb0, 0x04, 0xb8, 0x4b, 0x27, 0xce, 0xe9, 0x48, 0x6a,
	0x47, 0xe6, 0x12, 0xde, 0x86, 0xfc, 0x3e, 0xd7, 0x4b, 0x0c, 0xf3, 0x90, 0xdd, 0x21, 0x21, 0x5f,
	0xb8, 0x44, 0x7d, 0x33, 0x85, 0x45, 0x28, 0xf8, 0x5b, 0xbd, 0x27, 0xdd, 0x58, 0x87, 0xec, 0x2c,
	0x48, 0xf8, 0x1f, 0xa4, 0x0f, 0xf6, 0xf7, 0xcc, 0x25, 0xfc, 0x1f, 0x8c, 0xa7, 0x07, 0x8f, 0xf7,
	0x4c, 0xd6, 0xf9, 0x69, 0xc0, 0x2d, 0x4d, 0x81, 0x1f, 0x18, 0xe4, 0x2f, 0x3c, 0x6e, 0xac, 0x5f,
	0x99, 0x6c, 0xfd, 0xa5, 0x54, 0x1a, 0x8b, 0xb4, 0x06, 0xb6, 0x58, 0x8d, 0x77, 0xdf, 0x7f, 0x7c,
	0x4c, 0x6d, 0x5a, 0x56, 0x5b, 0xd3, 0xa8, 0x7f, 0xc4, 0xe9, 0x83, 0xb6, 0x0a, 0xdc, 0xec, 0x00,
	0x3f, 0x33, 0x28, 0xcc, 0x65, 0x1f, 0x9b, 0x89, 0x77, 0x25, 0x3f, 0xe1, 0xca, 0xf6, 0x62, 0xcd,
	0x21, 0xda, 0xb6, 0x42, 0xbb, 0x6f, 0x6d, 0x5e, 0x8e, 0xd6, 0x9f, 0x49, 0xf1, 0x3d, 0x83, 0x9c,
	0x1e, 0x76, 0xac, 0x5d, 0xe9, 0x82, 0x96, 0xc8, 0x4a, 0x7d, 0x81, 0xce, 0x90, 0xa9, 0xae, 0x98,
	0xaa, 0x78, 0x2f, 0x89, 0xc9, 0x0f, 0x53, 0xec, 0xd6, 0x27, 0x06, 0x2b, 0x17, 0x43, 0x8d, 0x8d,
	0x6b, 0xe6, 0xd7, 0xa1, 0x9a, 0x0b, 0xf5, 0x86, 0x58, 0x4d, 0x85, 0xb5, 0x85, 0xd5, 0x4b, 0xb1,
	0x62, 0xa7, 0x76, 0x8c, 0x97, 0x29, 0xf7, 0xf8, 0x78, 0x59, 0x7d, 0xe5, 0x1e, 0xfe, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x88, 0x8e, 0xc9, 0xa5, 0x29, 0x07, 0x00, 0x00,
}
